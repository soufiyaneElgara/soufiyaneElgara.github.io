{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":""},{"location":"#hi-my-name-is-soufiyane-el-gara","title":"Hi \ud83d\udc4b, My name is Soufiyane EL GARA","text":""},{"location":"#software-engineer","title":"Software Engineer","text":"<ul> <li>I'm a software engineer with a passion for coding and problem-solving.</li> <li>\ud83c\udf0d I'm based in Rabat, Morocco</li> <li>\u2709\ufe0f You can contact me at :</li> <li>soufiyaneelgara@gmail.com </li> <li>soufiyane@proton.me</li> </ul>"},{"location":"linux/learn-Git-and-Github/git/","title":"Git","text":""},{"location":"linux/learn-Git-and-Github/git/#content","title":"Content","text":"<ul> <li>Git</li> <li>Content<ul> <li>What is Git\u2753</li> <li>Why use Git\u2753</li> <li>How Git works\u2753</li> <li>What is branches \u2753</li> <li>Configuration</li> </ul> </li> </ul>"},{"location":"linux/learn-Git-and-Github/git/#what-is-git","title":"What is Git\u2753","text":"<ul> <li>Git is free and open source for distribution version control.</li> <li>It's a system that records changes to our files over time.</li> <li>Git allows users to track code changes and manage their project using simple commands.</li> <li>We can recalls specific version of those files at any given time.</li> <li>Many people can easily collaborate on a project and have their own version of project files on their computer.</li> </ul>"},{"location":"linux/learn-Git-and-Github/git/#why-use-git","title":"Why use Git\u2753","text":"<ul> <li>Store revisions in a project history in just one directory.</li> <li>Rewind on new features in the project I wanted to.</li> <li>Work on a new feature without messing up the main codebase.</li> <li>Easily collaborate with other programmers.</li> </ul>"},{"location":"linux/learn-Git-and-Github/git/#how-git-works","title":"How Git works\u2753","text":"<ul> <li>The hart of Git is repository used to contain a project.</li> <li>What is Repository ?</li> <li>A repository is a container for a project you want to track with git.</li> <li>A repository can allow users to store several different repo's and truck each one dependently.</li> <li>You can have many different repos's for many different projects on your computer.</li> <li>What is commits ?</li> <li>Git commit, creates a commit, which is like a snapshot of your repository.</li> <li>commits are the building blocks of a 'save points' with in git's version control.</li> <li>This commit are snapshots of your entire repository to a specific times.</li> <li>You should make new commits often, based around logical unites of change.</li> <li>Over time commits should tell us a story of the history of your repo and how it came to be they way it currently is.</li> <li>What is the commit process ?</li> <li>The Git committing process requires several steps: Moving Changes to the staging area and Saving them with Commit Command.</li> <li>The phases of a commit:<ol> <li>Modified: Changed files not commited.</li> <li>Staging: Add any changed files to staging that you want to commit.</li> <li>Commited: Any files in the stagin area are added to the commit when we make one.</li> </ol> </li> </ul>"},{"location":"linux/learn-Git-and-Github/git/#what-is-branches","title":"What is branches \u2753","text":"<ul> <li>A branch is new/separate version of the main repo.</li> <li>Branches allow you to work on different parts of a project, without impacting the main branch.</li> </ul>"},{"location":"linux/learn-Git-and-Github/git/#configuration","title":"Configuration","text":"<ol> <li>some basic commands in git:</li> </ol> <pre><code>sudo apt install git  #used to insall git on ubuntu.\ngit --version         #display the version.\ngit config --global user.name soufiyane             #to set a username to the git.\ngit config --gloabal user.email soufiyane@gmail.com #to set an email to git.\ngit config user.name  #display the username.\ngit config user.email #dispaly the email.\n</code></pre> <ol> <li> <p>How to create and manipulate repos ?</p> </li> <li> <p>Create a new repo:</p> </li> </ol> <pre><code>mkdir my-project` #create a folder for the project\ncd my-project     #go to the folder\ngit init          #intialize a new, empty repo here\n</code></pre> <ul> <li>How to commit a change ?</li> </ul> <pre><code>git add filename       #add the changed file to the staged phase\ngit add .              #add all files to the staging phase\ngit rm --cach filename #to remove a file from the stage phase\ngit status             #display the status file in stage phase(if add or not)\ngit commit -m \"describ the current commit\" #now you'r committing, with a discription message\ngit log                #display all the commits in the long format\ngit log --oneline      #display all the commits in a concise format\n</code></pre> <ul> <li> <p>How to back and change the commits ?</p> </li> <li> <p>checkout a commit : View the commits without changing anything (read only)</p> </li> </ul> <pre><code>git checkout 3243FFD #view the all the commits specific time, without editing(read only)\n\n ```\n\n1. revert a commit: Basically it can modify a commit, but it creates a new one, withe the new or deleted feature\n\n```bash\ngit revert 233EDS #the reverted commit steel in the logs\n</code></pre> <ol> <li>reset a commit: it means deleting the commit for good</li> <li>deleting the commit, with the possibility to recover</li> </ol> <pre><code>git reset 3242ffs #stell we have the changing in the working area, to recover:\n    git add . \n    git commit -m \"undo the reset\"\n</code></pre> <ol> <li>deleting for good(no chance to recover)</li> </ol> <pre><code>git reset 12131 --hard #remove the commit defentlly\n</code></pre> <ol> <li> <p>How to manipulate branches:</p> </li> <li> <p>create new branch and move to it</p> </li> </ol> <pre><code>git bransh feature-1   # Create a new branch\ngit branch -a          # Display all the branches\ngit checkout feature-1 # Switch to a specific branch\n</code></pre> <ul> <li>How to delete a branch?</li> </ul> <pre><code>git checkout master     # You should move to master/main first\ngit branch -d feature-1 # Delete a merged branch\ngit branch -D feature-1 # Delete un merged branch\n</code></pre> <ul> <li>How to merge a branch?</li> </ul> <pre><code>git checkout master # Move to the branch that you want to marge in to it\ngit merge feature-1 # Merge the feature 1 to master branch\n</code></pre> <ul> <li>What is conflict?</li> <li>An example of a conflict, when you make a new Branch for new feature, then after you a guy modifies in the master branch, then you need to help Git to decide which modification to keep</li> </ul> <pre><code>git marge feature-1 # pops an error, you need modifie the code\ngit add .           # add to stagin erea\ngit commit`         # make a commit witout a name(:wq, if a bash file is popeds)\n</code></pre>"},{"location":"linux/learn-Git-and-Github/github/","title":"Github","text":""},{"location":"linux/learn-Git-and-Github/github/#content","title":"Content","text":"<ul> <li>Github</li> <li>Content<ul> <li>What is Github\u2753</li> <li>what is token \u2753</li> <li>What is Forking \\&amp; contributing</li> <li>configuration</li> <li>How to create and manage a project on Github \u2753</li> </ul> </li> <li>fetch vs pull</li> </ul>"},{"location":"linux/learn-Git-and-Github/github/#what-is-github","title":"What is Github\u2753","text":"<ul> <li>online service that host our project.</li> <li>share our code with other developers.</li> <li>developers can download the projects and work on theme.</li> <li>they can re-upload their edits and marge them with the main code base.</li> </ul>"},{"location":"linux/learn-Git-and-Github/github/#what-is-token","title":"what is token \u2753","text":"<ul> <li>personnel access token are alternative to using password for authentication to Github when using CLI or Github API</li> <li>a token is no different from a password except:</li> <li>it's near-guaranteed to never used else where</li> <li>it's guaranteed to have high entropy</li> <li>it's scope is more limited than an account-wide password</li> <li>in short, Github took things out of the hand of users, because users make poor security decisions.</li> </ul>"},{"location":"linux/learn-Git-and-Github/github/#what-is-forking-contributing","title":"What is Forking &amp; contributing","text":"<ul> <li>Forking is a process when you copy a repo that is owned by someone else and he made it public to your forked repos.</li> </ul>"},{"location":"linux/learn-Git-and-Github/github/#configuration","title":"configuration","text":""},{"location":"linux/learn-Git-and-Github/github/#how-to-create-and-manage-a-project-on-github","title":"How to create and manage a project on Github \u2753","text":"<ol> <li> <p>First scenario: you are building the project for the first time</p> </li> <li> <p>create a repo</p> </li> <li>copy the URL of you repo</li> <li>go to you terminal: <code>git clone URL</code></li> <li>after any change and committing the project you can update the project on Github: <code>git push URL master</code>(mater or main)</li> <li>in general when you clone the Github creates an alias to the URL to verify: <code>git remote -v</code> so to update you type only : <code>git push origin main</code>(you need a username of your Github, and token)</li> </ol> <pre><code>git clone https/...  # Copy the project(files) in my local machine\ngit remote -v        # Display the alias of the url\ngit push url main    # Update the project with url\ngit push origin main # Update the project using the alias\n</code></pre> <ol> <li> <p>second scenario: you have an existing project in your local pc</p> </li> <li> <p>you should create a repo, withe the exact name as your project</p> </li> <li>copy the link to the repo</li> <li>go to terminal</li> <li>verify if everything is committed <code>git status</code></li> <li>then push to Github : <code>git push URL main</code> </li> <li>you can create an alias to the URL : <code>git remote add origin URL</code></li> <li> <p>then send:<code>git push origin main</code></p> </li> <li> <p>collaborating on a team</p> </li> <li> <p>collaboration, means how to work with Github on a team</p> </li> <li>first we suppose we have project on git hub</li> <li>after working on the project locally make sure to update from the remote: <code>git pull origin main</code></li> <li>create a new branch for the new feature, never work directly on the main(master) : <code>git checkout -b feature-1</code> #this command create and move at the same time to the branch</li> <li>send the new branch: <code>git push origin feature-1</code></li> <li> <p>then i create a pull request, my work need to approved it and reviewed it  by team members or the manger, only than i can merge the branch to main or the master</p> </li> <li> <p>How to fork \u2753</p> </li> <li>click 'fork' in the original repo</li> <li>in your forked repo, click the clone or download button</li> <li>copy the git link : <code>git clone URL</code></li> <li>How to update from the originals?</li> <li><code>git remote add upstream &lt;origin-repo-add&gt;</code></li> <li><code>git fetch upstream</code> </li> <li><code>git pull upstream master</code>: to update the local master</li> <li>Why to submit a pull request?</li> <li>once you have made changes to your fork, you can request for those changes to be merged into the original project.</li> </ol>"},{"location":"linux/learn-Git-and-Github/github/#fetch-vs-pull","title":"fetch vs pull","text":"<ol> <li>fetch vs pull</li> <li>both are used to download new data from a remote repo</li> <li>fetch <code>git fetch upstream master</code><ul> <li>git fetch really only downloads new data from a remote repo, but it doesn't integrate this new data into your working files</li> <li>fetch is a greate for getting first view on all things that happend in a remote repo</li> </ul> </li> <li>pull <code>git pull upstream master</code><ul> <li>git pull, in contrast, is used with a different goal in lined: to update your corrent HEAD branch with the latest changes from the remote server.</li> </ul> </li> </ol>"}]}